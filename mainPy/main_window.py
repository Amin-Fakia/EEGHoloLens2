# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sip
from vtk.qt.QVTKRenderWindowInteractor import QVTKRenderWindowInteractor
from dsi_24_montage import ch_pos,chnls
from scipy.signal import savgol_filter
import pyqtgraph as pg
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import os
from functions import *

pg.setConfigOption('background', 'w')
pg.setConfigOption('foreground', 'k')

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        #MainWindow.resize(1180, 794)
        MainWindow.setFixedSize(1180, 794)
        self.vtkWidget = QVTKRenderWindowInteractor()
        self.win = pg.PlotWidget()
        self.win2 = pg.PlotWidget()
        self.win3 = pg.PlotWidget()
        #self.win.plot(hour,temperature)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 20, 281, 350))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.line = QtWidgets.QFrame(self.verticalLayoutWidget)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout.addWidget(self.line)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.doubleSpinBox = QtWidgets.QDoubleSpinBox(self.verticalLayoutWidget)
        
        self.doubleSpinBox.setObjectName("doubleSpinBox")
        self.doubleSpinBox.setMinimum(0.5)
        self.gridLayout_2.addWidget(self.doubleSpinBox, 1, 0, 1, 1)
        self.doubleSpinBox_2 = QtWidgets.QDoubleSpinBox(self.verticalLayoutWidget)
        self.doubleSpinBox_2.setMinimum(2.0)
        self.doubleSpinBox_2.setSingleStep(0.5)
        self.doubleSpinBox_2.setObjectName("doubleSpinBox_2")

        self.doubleSpinBox_2.editingFinished.connect(self.log)
        self.doubleSpinBox.editingFinished.connect(self.log)

        self.gridLayout_2.addWidget(self.doubleSpinBox_2, 1, 1, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_3.setObjectName("label_3")
        self.gridLayout_2.addWidget(self.label_3, 0, 1, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_2.setObjectName("label_2")
        self.gridLayout_2.addWidget(self.label_2, 0, 0, 1, 1)
        self.verticalLayout.addLayout(self.gridLayout_2)
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(300, 20, 841, 661))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidget = QtWidgets.QTabWidget(self.gridLayoutWidget)
        self.tabWidget.setObjectName("tabWidget")
        #self.tab = QtWidgets.QWidget()
        #self.tab.setObjectName("tab")
        #self.tabWidget.addTab(self.tab, "")
        #self.tab_2 = QtWidgets.QWidget()
        #self.tab_2.setObjectName("tab_2")
        #self.tabWidget.addTab(self.tab_2, "")
        self.gridLayout.addWidget(self.tabWidget, 0, 0, 1, 1)
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(300, 690, 841, 80))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_4 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout.addWidget(self.label_4)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        # Button 2
        self.plotBtn = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.plotBtn.setObjectName("plotBtn")
        
        # Button 3
        self.plotBtn2 = QtWidgets.QPushButton()
        self.plotBtn2.setObjectName("plotBtn2")
        
        # Button 4
        self.showMNEBtn = QtWidgets.QPushButton()
        self.showMNEBtn.setObjectName("showMNEBtn")

        # Button 5
        self.show3DPlot = QtWidgets.QPushButton()
        self.show3DPlot.setObjectName("show3DPlot")

        # Button 6 MNE
        self.plotMNE = QtWidgets.QPushButton()
        self.plotMNE.setObjectName("plotMNE")

        # Button 7
        self.plotPower = QtWidgets.QPushButton()
        self.plotPower.setObjectName("plotPower")
        # Button 8
        self.plotSmooth = QtWidgets.QPushButton()
        self.plotSmooth.setObjectName("plotSmooth")

        self.pushButton.clicked.connect(self.getEDFFile)
        self.plotBtn.clicked.connect(self.plotData)
        self.plotBtn2.clicked.connect(self.plotFFT)
        self.showMNEBtn.clicked.connect(self.showMNEOptions)
        self.show3DPlot.clicked.connect(self.plot3D)
        self.plotMNE.clicked.connect(self.plotAllChannels)
        self.plotSmooth.clicked.connect(self.plotFilter)
        self.plotPower.clicked.connect(self.plotPowerValues)

        self.path = ""
        self.obj_path = ""
        self.cb = QtWidgets.QComboBox(self.verticalLayoutWidget)
        self.horizontalLayout.addWidget(self.plotMNE)
        self.horizontalLayout.addWidget(self.plotSmooth)
        self.horizontalLayout.addWidget(self.plotPower)
        self.line2 = QtWidgets.QFrame(self.verticalLayoutWidget)
        self.line2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line2.setFrameShadow(QtWidgets.QFrame.Sunken)

        self.verticalLayout.addWidget(self.line2)
        self.verticalLayout.addWidget(self.cb)
        
        self.vp = Plotter(qtWidget=self.vtkWidget)

        self.verticalLayout.addWidget(self.plotBtn)
        
        self.plotPower.hide()
        self.plotSmooth.hide()
        self.plotMNE.hide()
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    # need optimization TODO
 
    def log(self):
        if(self.obj_path != ''):
            self.updateGraph()
    def plotPowerValues(self):
        curr_ch = mne.pick_channels(self.ch_names,include=[f"{self.cb.currentText()}"])
        plot_data(self.powerValues[curr_ch[0]])
        
        
    def plotFilter(self):
        curr_ch = mne.pick_channels(self.ch_names,include=[f"{self.cb.currentText()}"])
        plot_data(self.smooth_data[curr_ch[0]])
        
    #STILL MESSY needs fix TODO
    def updateGraph(self):
        
        l_freq = self.doubleSpinBox.value()
        h_freq = self.doubleSpinBox_2.value()
        
        data = self.raw.copy().filter(l_freq,h_freq).get_data()[:len(self.raw.get_data())-1]
        self.powerValues = self.get_powerValues(data)
        self.powerValues = self.powerValues.tolist()
        self.smooth_data = self.smoothFilter(self.powerValues)
        intpr = RBF_Interpolation(self.mesh,self.sensors_Locations,[j[0] for j in self.smooth_data])
        self.vmax = max([max(i[0:len(self.smooth_data)]) for i in self.smooth_data])
        self.mesh.cmap('jet',intpr,vmin=-self.vmax, vmax=self.vmax)
        
        
        self.vp.show(self.mesh,self.sensors_pts,self.filename_txt,*self.txts)
        
    def slider(self,widget, event):
        value = int(widget.GetRepresentation().GetValue())
        intpr = RBF_Interpolation(self.mesh,self.sensors_Locations,[j[value] for j in self.smooth_data])
        self.mesh.cmap('jet', intpr, vmin=-self.vmax, vmax=self.vmax)
        #self.vp.show(self.mesh,self.sensors_pts,self.filename_txt,*self.txts)

    def plot3D(self):
        self.obj_path,_ = QFileDialog.getOpenFileName(self, 'Open a file', '',
                                     'OBJ (*.obj)')
        if(self.obj_path != ''):
            
            self.vp.clear()
            self.plotSmooth.show()
            self.plotPower.show()
            self.tabWidget.addTab(self.vtkWidget,'3D Plot')
            self.sensors_Locations = get_sensor_3DLocations(ch_pos,["TRG"])
            l_freq = self.doubleSpinBox.value()
            h_freq = self.doubleSpinBox_2.value()
            self.sensors_pts = Points(self.sensors_Locations,r=9)
            self.txts = []
            i = 0
            for pt in self.sensors_Locations:
                txt = Text3D(f"{chnls[i][4:6]}",pt,s=0.006,c='k')
                txt.followCamera()
                self.txts.append(txt)
                i+=1
            
            filename = os.path.basename(self.obj_path)
            self.filename_txt = Text2D(f"{filename}")
            self.mesh = get_mesh(self.obj_path)
            
            # This is a mess TODO: make data universal ?
            data = self.raw.copy().filter(l_freq,h_freq).get_data()[:len(self.raw.get_data())-1] # Exclude TRG TODO: make a func to exclude channels
            
            self.powerValues = self.get_powerValues(data)
            self.powerValues = self.powerValues.tolist()
            self.smooth_data = self.smoothFilter(self.powerValues)
            
            
            intpr = RBF_Interpolation(self.mesh,self.sensors_Locations,[j[0] for j in self.smooth_data])

            
            self.vmax = max([max(i[0:len(self.smooth_data)]) for i in self.smooth_data])
            
            self.mesh.cmap('jet',intpr,vmin=-self.vmax, vmax=self.vmax)
             
            #self.vp.addSlider2D(self.slider,0,len(self.smooth_data[0])-1,value=0,pos="buttom-right",title="Window Number",c='k')
            
            #self.updateGraph()
            # self.tabWidget.addTab(self.vtkWidget,'3D Plot')
            # self.vp = Plotter(qtWidget=self.vtkWidget)
            self.vp.show(self.mesh,self.sensors_pts,self.filename_txt,*self.txts,interactive=1).addSlider2D(self.slider,0,len(self.smooth_data[0])-1,value=0,pos="buttom-right",title="Window Number",c='k')
        # LATER TODO
        # else:
        #     self.updateGraph()
    def get_powerValues(self,data,sfreq=300,winsize=3,step=0.3):
        min_win = 0
        max_win = winsize
        powerValues_array = []
        while(max_win < (len(data[0])/300)):
            pos_x1 = int((min_win)*sfreq)
            pos_x2 = int((max_win)*sfreq)
            
            sums = []
            
            for d in data:
                ft = np.abs(np.fft.rfft(d[pos_x1:pos_x2]))
                ps = np.square(ft)
                
                sums.append(sum(ps))
            
            powerValues_array.append(sums)
            min_win +=step
            max_win +=step
        return np.transpose(powerValues_array)
    def smoothFilter(self,data,winsize=71,po=3):
        data_smooth = []
        for d in data:
            data_smooth.append(savgol_filter(d,winsize,po))
        return data_smooth
    # ERP Extraction - still TODO                     
    def get_ERP_values(self,data,sampling_rate,win_size,step,itr):
        min_win = 0
        max_win = win_size
        data_array = []
        while(max_win < itr):
            pos_x1 = int((min_win)*sampling_rate)
            pos_x2 = int((max_win)*sampling_rate)
            sums = []
            for d in data:
                sums.append(sum(d[pos_x1:pos_x2]))
            data_array.append(sums)
            min_win +=step
            max_win +=step
        return np.transpose(data_array)
    def plotAllChannels(self):
        l_freq = self.doubleSpinBox.value()
        h_freq = self.doubleSpinBox_2.value()
        filt_raw = self.raw.copy().filter(l_freq,h_freq)
        filt_raw.plot()
    
    def showMNEOptions(self):
        
        if(self.showMNEBtn.text() == "Show MNE Options"):
            
            self.plotMNE.show()
            self.showMNEBtn.setText("Hide MNE Options")
            
        else:
            self.plotMNE.hide()
            
            self.showMNEBtn.setText("Show MNE Options")
            
        
    def getEDFFile(self):
        self.path,_ = QFileDialog.getOpenFileName(self, 'Open a file', '',
                                     'EDF (*.edf)')
        if self.path != '':
            self.win.clear()
            self.win2.clear()
            self.win3.clear()
            self.verticalLayout.addWidget(self.plotBtn2)
            self.verticalLayout.addWidget(self.showMNEBtn)
            self.verticalLayout.addWidget(self.show3DPlot)
            filename = os.path.basename(self.path)
            try:
                self.label.setStyleSheet("QLabel {color: black}")
                self.raw = mne.io.read_raw_edf(self.path ,preload=True).drop_channels(['EEG CM-Pz','EEG X1-Pz','EEG X2-Pz','EEG X3-Pz'])
                self.ch_names = self.raw.info["ch_names"]
                self.cb.addItems(self.ch_names)
                keys = ['sfreq','nchan','highpass','lowpass']
                info = [self.raw.info.get(k) for k in keys ]
                self.label.setText(f'loaded: {filename}\nsample frequency: {info[0]} Hz\nnumber of channels: {info[1]}\nhighpass: {info[2]} Hz\nlowpass: {info[3]} Hz ')
                
            except:
                self.path = ''
                self.label.setStyleSheet("QLabel {color: red}")
                self.label.setText(f'Something went wrong while reading the File')

    def plotData(self):

        if(self.path != ''):
            #raw = mne.io.read_raw_edf(self.path ,preload=True).drop_channels(['EEG CM-Pz','EEG X1-Pz','EEG X2-Pz','EEG X3-Pz'])
            l_freq = self.doubleSpinBox.value()
            h_freq = self.doubleSpinBox_2.value()
            filt_raw = self.raw.copy().filter(l_freq,h_freq)
            times = [t/1000 for t in get_times(filt_raw)]
            curr_ch = mne.pick_channels(self.ch_names,include=[f"{self.cb.currentText()}"]) # should be global TODO
            self.win.clear()
            self.win.plot(times,filt_raw.get_data()[curr_ch[0]], pen=pg.mkPen('k',width=1))
            
            self.tabWidget.addTab(self.win,"Plot Channel")
            self.tabWidget.setCurrentWidget(self.win)
        else:
            self.label.setStyleSheet("QLabel {color: red}")
            self.label.setText(f'No File Loaded')
    def plotFFT(self):
        if(self.path != ''):
            self.win2.clear()
            curr_ch = mne.pick_channels(self.ch_names,include=[f"{self.cb.currentText()}"])
            l_freq = self.doubleSpinBox.value()
            h_freq = self.doubleSpinBox_2.value()
            filt_raw = self.raw.copy().filter(l_freq,h_freq)
            ft = np.abs(np.fft.rfft(filt_raw.get_data()[curr_ch[0]]))
            ps = np.square(ft)
            frequency = np.linspace(0, 300/2, len(ps))
            self.win2.plot(frequency, ps, pen=pg.mkPen('b'))
            self.tabWidget.addTab(self.win2,"FFT")
            self.tabWidget.setCurrentWidget(self.win2)
        else:
            self.label.setStyleSheet("QLabel {color: red}")
            self.label.setText(f'No File Loaded')
        

        
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Open EDF"))
        
        self.plotBtn.setText(_translate("MainWindow", "Plot Channel"))
        self.plotBtn2.setText(_translate("MainWindow", "Perform FFT"))
        self.plotMNE.setText(_translate("MainWindow", "Plot All Channels"))
        self.plotSmooth.setText(_translate("MainWindow", "Plot Smooth"))
        self.plotPower.setText(_translate("MainWindow", "Plot Power"))
        self.show3DPlot.setText(_translate("MainWindow", "Show 3D Plot"))
        self.showMNEBtn.setText(_translate("MainWindow", "Show MNE Options"))
        self.label.setText(_translate("MainWindow", "Load in the file"))
        
        self.label_3.setText(_translate("MainWindow", "max frequency \n (lowpass):"))
        self.label_2.setText(_translate("MainWindow", "min frequency \n (highpass):"))
        
        self.label_4.setText(_translate("MainWindow", "By Amin Fakia"))
